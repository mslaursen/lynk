[tool.poetry]
name = "server"
version = "0.1.0"
description = ""
authors = ["mslaursen <martin_laursen21@hotmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.111.0"
uvicorn = "^0.30.1"
ruff = "^0.5.0"
mypy = "^1.10.1"
pre-commit = "^3.7.1"
pydantic = "^2.7.4"
loguru = "^0.7.2"
pydantic-settings = "^2.3.4"
sqlalchemy = "^2.0.31"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.mypy]
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
allow_untyped_calls = true
pretty = true
show_error_codes = true
implicit_reexport = true
allow_untyped_decorators = true
warn_return_any = false
warn_unused_ignores = false
plugins = ["sqlalchemy.ext.mypy.plugin", "pydantic.mypy"]


[tool.pytest.ini_options]
testpaths = ["tests/pytest"]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]


[tool.ruff]
# List of enabled rulsets. 
# See https://docs.astral.sh/ruff/rules/ for more information.
lint.select = [
    "E",   # Error 
    "F",   # Pyflakes
    "W",   # Pycodestyle
    "C90", # McCabe complexity
    "I",   # Isort
    "N",   # pep8-naming
    "D",   # Pydocstyle
    "ANN", # Pytype annotations
    "S",   # Bandit
    "B",   # Bugbear
    "COM", # Commas
    "C4",  # Comprehensions
    "ISC", # Implicit string concat
    "PIE", # Unnecessary code
    "T20", # Catch prints
    "PYI", # validate pyi files
    "Q",   # Checks for quotes
    "RSE", # Checks raise statements
    "RET", # Checks return statements
    "SLF", # Self checks
    "SIM", # Simplificator
    "PTH", # Pathlib checks
    "ERA", # Checks for commented out code
    "PL",  # PyLint checks
    "RUF", # Specific to Ruff checks
]
lint.ignore = [
    "D105",    # Missing docstring in magic method
    "D106",    # Missing docstring in public nested class
    "D107",    # Missing docstring in __init__
    "D202",    # No blank lines allowed after function docstring 
    "D211",    # No blank lines allowed before class docstring
    "D212",    # Multi-line docstring summary should start at the first line
    "D401",    # First line should be in imperative mood
    "D104",    # Missing docstring in public package
    "D100",    # Missing docstring in public module
    "ANN102",  # Missing type annotation for self in method
    "ANN101",  # Missing type annotation for argument
    "ANN401",  # typing.Any are disallowed in `**kwargs
    "PLR0913", # Too many arguments for function call
    "COM812",  # Missing trailing comma
    "PYI036",  # bad-exit-annotation
    "ISC001",  # Implicit string concatenation
    "B008",    # Do not use mutable data structures for argument defaults
    "PLR2004", # Magic number
    "RUF012",  # Mutable class attribute
]

lint.mccabe = { max-complexity = 10 }
line-length = 88

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101", # Use of assert detected
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"
ignore-decorators = ["typing.overload"]
